{
  "address": "0x090484867f74202dB7a859fb2B4069762f3e38c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_owner",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "new_beneficiary",
              "type": "string"
            },
            {
              "internalType": "int256",
              "name": "new_quota",
              "type": "int256"
            },
            {
              "internalType": "uint64",
              "name": "new_expiration",
              "type": "uint64"
            }
          ],
          "internalType": "struct MinerTypes.ChangeBeneficiaryParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "change_beneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "addr",
          "type": "string"
        }
      ],
      "name": "change_owner_address",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_available_balance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "available_balance",
              "type": "int256"
            }
          ],
          "internalType": "struct MinerTypes.GetAvailableBalanceReturn",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_beneficiary",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "beneficiary",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "quota",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "used_quota",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "expiration",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct CommonTypes.BeneficiaryTerm",
                  "name": "term",
                  "type": "tuple"
                }
              ],
              "internalType": "struct CommonTypes.ActiveBeneficiary",
              "name": "active",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "new_beneficiary",
                  "type": "bytes"
                },
                {
                  "internalType": "int256",
                  "name": "new_quota",
                  "type": "int256"
                },
                {
                  "internalType": "uint64",
                  "name": "new_expiration",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "approved_by_beneficiary",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "approved_by_nominee",
                  "type": "bool"
                }
              ],
              "internalType": "struct CommonTypes.PendingBeneficiaryChange",
              "name": "proposed",
              "type": "tuple"
            }
          ],
          "internalType": "struct MinerTypes.GetBeneficiaryReturn",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_owner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "owner",
              "type": "string"
            }
          ],
          "internalType": "struct MinerTypes.GetOwnerReturn",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_sector_size",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "sector_size",
              "type": "uint64"
            }
          ],
          "internalType": "struct MinerTypes.GetSectorSizeReturn",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_vesting_funds",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int64",
                  "name": "epoch",
                  "type": "int64"
                },
                {
                  "internalType": "int256",
                  "name": "amount",
                  "type": "int256"
                }
              ],
              "internalType": "struct CommonTypes.VestingFunds[]",
              "name": "vesting_funds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MinerTypes.GetVestingFundsReturn",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "addr",
              "type": "string"
            }
          ],
          "internalType": "struct MinerTypes.IsControllingAddressParam",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "is_controlling_address",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "is_controlling",
              "type": "bool"
            }
          ],
          "internalType": "struct MinerTypes.IsControllingAddressReturn",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "addr",
          "type": "string"
        }
      ],
      "name": "mock_set_owner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x524147cb2573c87e69ed748a17fe2cf25c4aabeb6d4b57a4b4e24033f4abd9ee",
  "receipt": {
    "to": null,
    "from": "0x1a5516BeDB0CaAB297c8cecaBdFe96325469EF2d",
    "contractAddress": "0x090484867f74202dB7a859fb2B4069762f3e38c2",
    "transactionIndex": 0,
    "gasUsed": "89199707",
    "logsBloom": "0x
    "blockHash": "0x387ceb74c711754a74fe6d1bb1b2223409be4713607f6ecc797874723087c227",
    "transactionHash": "0x524147cb2573c87e69ed748a17fe2cf25c4aabeb6d4b57a4b4e24033f4abd9ee",
    "logs": [],
    "blockNumber": 8424,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "a04d991948acb7d11ad6afcad0097d4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_owner\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"new_beneficiary\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"new_quota\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"new_expiration\",\"type\":\"uint64\"}],\"internalType\":\"struct MinerTypes.ChangeBeneficiaryParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"change_beneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"change_owner_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_available_balance\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"available_balance\",\"type\":\"int256\"}],\"internalType\":\"struct MinerTypes.GetAvailableBalanceReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_beneficiary\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"beneficiary\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"quota\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"used_quota\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"}],\"internalType\":\"struct CommonTypes.BeneficiaryTerm\",\"name\":\"term\",\"type\":\"tuple\"}],\"internalType\":\"struct CommonTypes.ActiveBeneficiary\",\"name\":\"active\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"new_beneficiary\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"new_quota\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"new_expiration\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"approved_by_beneficiary\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"approved_by_nominee\",\"type\":\"bool\"}],\"internalType\":\"struct CommonTypes.PendingBeneficiaryChange\",\"name\":\"proposed\",\"type\":\"tuple\"}],\"internalType\":\"struct MinerTypes.GetBeneficiaryReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_owner\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"}],\"internalType\":\"struct MinerTypes.GetOwnerReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_sector_size\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sector_size\",\"type\":\"uint64\"}],\"internalType\":\"struct MinerTypes.GetSectorSizeReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_vesting_funds\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"epoch\",\"type\":\"int64\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct CommonTypes.VestingFunds[]\",\"name\":\"vesting_funds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MinerTypes.GetVestingFundsReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"internalType\":\"struct MinerTypes.IsControllingAddressParam\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"is_controlling_address\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"is_controlling\",\"type\":\"bool\"}],\"internalType\":\"struct MinerTypes.IsControllingAddressReturn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"mock_set_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zondax AG\",\"details\":\"Methods prefixed with mock_ will not be available in the real library. These methods are merely used to set mock state. Note that this interface will likely break in the future as we align it\",\"kind\":\"dev\",\"methods\":{\"change_owner_address(string)\":{\"params\":{\"addr\":\"New owner address\"}},\"get_available_balance()\":{\"returns\":{\"_0\":\"the available balance of this miner.\"}},\"get_owner()\":{\"returns\":{\"_0\":\"the owner address of a Miner\"}},\"get_sector_size()\":{\"returns\":{\"_0\":\"the miner's sector size.\"}},\"get_vesting_funds()\":{\"returns\":{\"_0\":\"the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\"}},\"is_controlling_address((string))\":{\"params\":{\"params\":\"The \\\"controlling\\\" addresses are the Owner, the Worker, and all Control Addresses.\"},\"returns\":{\"_0\":\"Whether the provided address is \\\"controlling\\\".\"}}},\"title\":\"This contract is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed. However, in this mock library, no actual call is performed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"change_beneficiary((string,int256,uint64))\":{\"notice\":\"Proposes or confirms a change of beneficiary address.A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\"},\"change_owner_address(string)\":{\"notice\":\"Proposes or confirms a change of owner address.If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\"},\"constructor\":{\"notice\":\"(Mock method) Sets the owner of a Miner on contract deployment, which will be returned via get_owner().\"},\"get_available_balance()\":{\"notice\":\"This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)Can go negative if the miner is in IP debt.\"},\"get_beneficiary()\":{\"notice\":\"This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.Retrieves the currently active and proposed beneficiary information.\"},\"get_owner()\":{\"notice\":\"Income and returned collateral are paid to this addressThis address is also allowed to change the worker address for the miner\"},\"mock_set_owner(string)\":{\"notice\":\"(Mock method) Sets the owner of a Miner, which will be returned via get_owner().\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/filecoinMockAPIs/MinerAPI.sol\":\"MinerAPI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/filecoinMockAPIs/MinerAPI.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.4.25 <=0.8.17;\\n\\nimport \\\"./types/MinerTypes.sol\\\";\\n\\n/// @title This contract is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed. However, in this mock library, no actual call is performed.\\n/// @author Zondax AG\\n/// @dev Methods prefixed with mock_ will not be available in the real library. These methods are merely used to set mock state. Note that this interface will likely break in the future as we align it\\n//       with that of the real library!\\ncontract MinerAPI {\\n    string owner;\\n    bool isBeneficiarySet = false;\\n    CommonTypes.ActiveBeneficiary activeBeneficiary;\\n    mapping(CommonTypes.SectorSize => uint64) sectorSizesBytes;\\n\\n    /// @notice (Mock method) Sets the owner of a Miner on contract deployment, which will be returned via get_owner().\\n    constructor(string memory _owner) {\\n        owner = _owner;\\n\\n        sectorSizesBytes[CommonTypes.SectorSize._2KiB] = 2 << 10;\\n        sectorSizesBytes[CommonTypes.SectorSize._8MiB] = 8 << 20;\\n        sectorSizesBytes[CommonTypes.SectorSize._512MiB] = 512 << 20;\\n        sectorSizesBytes[CommonTypes.SectorSize._32GiB] = 32 << 30;\\n        sectorSizesBytes[CommonTypes.SectorSize._64GiB] = 2 * (32 << 30);\\n    }\\n\\n    /// @notice (Mock method) Sets the owner of a Miner, which will be returned via get_owner().\\n    function mock_set_owner(string memory addr) public {\\n        require(bytes(owner).length == 0);\\n        owner = addr;\\n    }\\n\\n    /// @notice Income and returned collateral are paid to this address\\n    /// @notice This address is also allowed to change the worker address for the miner\\n    /// @return the owner address of a Miner\\n    function get_owner()\\n        public\\n        view\\n        returns (MinerTypes.GetOwnerReturn memory)\\n    {\\n        require(bytes(owner).length != 0);\\n\\n        return MinerTypes.GetOwnerReturn(owner);\\n    }\\n\\n    /// @param addr New owner address\\n    /// @notice Proposes or confirms a change of owner address.\\n    /// @notice If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\\n    function change_owner_address(string memory addr) public {\\n        owner = addr;\\n    }\\n\\n    /// @param params The \\\"controlling\\\" addresses are the Owner, the Worker, and all Control Addresses.\\n    /// @return Whether the provided address is \\\"controlling\\\".\\n    function is_controlling_address(\\n        MinerTypes.IsControllingAddressParam memory params\\n    ) public pure returns (MinerTypes.IsControllingAddressReturn memory) {\\n        return MinerTypes.IsControllingAddressReturn(false);\\n    }\\n\\n    /// @return the miner's sector size.\\n    function get_sector_size()\\n        public\\n        view\\n        returns (MinerTypes.GetSectorSizeReturn memory)\\n    {\\n        return\\n            MinerTypes.GetSectorSizeReturn(\\n                sectorSizesBytes[CommonTypes.SectorSize._8MiB]\\n            );\\n    }\\n\\n    /// @notice This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)\\n    /// @notice Can go negative if the miner is in IP debt.\\n    /// @return the available balance of this miner.\\n    function get_available_balance()\\n        public\\n        pure\\n        returns (MinerTypes.GetAvailableBalanceReturn memory)\\n    {\\n        return MinerTypes.GetAvailableBalanceReturn(10000000000000000000000);\\n    }\\n\\n    /// @return the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\\n    function get_vesting_funds()\\n        public\\n        pure\\n        returns (MinerTypes.GetVestingFundsReturn memory)\\n    {\\n        CommonTypes.VestingFunds[]\\n            memory vesting_funds = new CommonTypes.VestingFunds[](1);\\n        vesting_funds[0] = CommonTypes.VestingFunds(\\n            1668514825,\\n            2000000000000000000000\\n        );\\n\\n        return MinerTypes.GetVestingFundsReturn(vesting_funds);\\n    }\\n\\n    /// @notice Proposes or confirms a change of beneficiary address.\\n    /// @notice A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.\\n    /// @notice See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\\n    function change_beneficiary(\\n        MinerTypes.ChangeBeneficiaryParams memory params\\n    ) public {\\n        if (!isBeneficiarySet) {\\n            CommonTypes.BeneficiaryTerm memory term = CommonTypes\\n                .BeneficiaryTerm(params.new_quota, 0, params.new_expiration);\\n            activeBeneficiary = CommonTypes.ActiveBeneficiary(\\n                params.new_beneficiary,\\n                term\\n            );\\n            isBeneficiarySet = true;\\n        } else {\\n            activeBeneficiary.beneficiary = params.new_beneficiary;\\n            activeBeneficiary.term.quota = params.new_quota;\\n            activeBeneficiary.term.expiration = params.new_expiration;\\n        }\\n    }\\n\\n    /// @notice This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.\\n    /// @notice Retrieves the currently active and proposed beneficiary information.\\n    function get_beneficiary()\\n        public\\n        view\\n        returns (MinerTypes.GetBeneficiaryReturn memory)\\n    {\\n        require(isBeneficiarySet);\\n\\n        CommonTypes.PendingBeneficiaryChange memory proposed;\\n        return MinerTypes.GetBeneficiaryReturn(activeBeneficiary, proposed);\\n    }\\n}\\n\",\"keccak256\":\"0xdaecb3186fb688647334f03d231fd2ecf2ad5007cb2b6993997cdfe6ab1ce253\",\"license\":\"Apache-2.0\"},\"contracts/filecoinMockAPIs/types/CommonTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.4.25 <=0.8.17;\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    enum RegisteredSealProof {\\n        StackedDRG2KiBV1,\\n        StackedDRG512MiBV1,\\n        StackedDRG8MiBV1,\\n        StackedDRG32GiBV1,\\n        StackedDRG64GiBV1,\\n        StackedDRG2KiBV1P1,\\n        StackedDRG512MiBV1P1,\\n        StackedDRG8MiBV1P1,\\n        StackedDRG32GiBV1P1,\\n        StackedDRG64GiBV1P1,\\n        Invalid\\n    }\\n\\n    enum RegisteredPoStProof {\\n        StackedDRGWinning2KiBV1,\\n        StackedDRGWinning8MiBV1,\\n        StackedDRGWinning512MiBV1,\\n        StackedDRGWinning32GiBV1,\\n        StackedDRGWinning64GiBV1,\\n        StackedDRGWindow2KiBV1,\\n        StackedDRGWindow8MiBV1,\\n        StackedDRGWindow512MiBV1,\\n        StackedDRGWindow32GiBV1,\\n        StackedDRGWindow64GiBV1,\\n        Invalid\\n    }\\n\\n    enum RegisteredUpdateProof {\\n        StackedDRG2KiBV1,\\n        StackedDRG8MiBV1,\\n        StackedDRG512MiBV1,\\n        StackedDRG32GiBV1,\\n        StackedDRG64GiBV1,\\n        Invalid\\n    }\\n    enum ExtensionKind {\\n        ExtendCommittmentLegacy,\\n        ExtendCommittment\\n    }\\n\\n    enum SectorSize {\\n        _2KiB,\\n        _8MiB,\\n        _512MiB,\\n        _32GiB,\\n        _64GiB\\n    }\\n\\n    struct ValidatedExpirationExtension {\\n        uint64 deadline;\\n        uint64 partition;\\n        uint8 sectors;\\n        int64 new_expiration;\\n    }\\n\\n    struct ExtendExpirationsInner {\\n        ValidatedExpirationExtension[] extensions;\\n        bytes claims; // FIXME this is a BTreeMap<SectorNumber, (u64, u64)> on rust\\n    }\\n\\n    struct PendingBeneficiaryChange {\\n        bytes new_beneficiary;\\n        int256 new_quota;\\n        uint64 new_expiration;\\n        bool approved_by_beneficiary;\\n        bool approved_by_nominee;\\n    }\\n\\n    struct BeneficiaryTerm {\\n        int256 quota;\\n        int256 used_quota;\\n        uint64 expiration;\\n    }\\n\\n    struct ActiveBeneficiary {\\n        string beneficiary;\\n        BeneficiaryTerm term;\\n    }\\n\\n    struct RecoveryDeclaration {\\n        uint64 deadline;\\n        uint64 partition;\\n        uint8 sectors;\\n    }\\n\\n    struct FaultDeclaration {\\n        uint64 deadline;\\n        uint64 partition;\\n        uint8 sectors;\\n    }\\n\\n    struct TerminationDeclaration {\\n        uint64 deadline;\\n        uint64 partition;\\n        uint8 sectors;\\n    }\\n\\n    struct SectorClaim {\\n        uint64 sector_number;\\n        uint64[] maintain_claims;\\n        uint64[] drop_claims;\\n    }\\n\\n    struct ExpirationExtension2 {\\n        uint64 deadline;\\n        uint64 partition;\\n        uint8 sectors;\\n        SectorClaim[] sectors_with_claims;\\n        int64 new_expiration;\\n    }\\n\\n    struct ExpirationExtension {\\n        uint64 deadline;\\n        uint64 partition;\\n        uint8 sectors;\\n        int64 new_expiration;\\n    }\\n\\n    struct FilterEstimate {\\n        int256 position;\\n        int256 velocity;\\n    }\\n\\n    struct SectorPreCommitInfoInner {\\n        RegisteredSealProof seal_proof;\\n        uint64 sector_number;\\n        bytes sealed_cid;\\n        int64 seal_rand_epoch;\\n        uint64[] deal_ids;\\n        int64 expiration;\\n        bytes unsealed_cid;\\n    }\\n\\n    struct SectorPreCommitInfo {\\n        RegisteredSealProof seal_proof;\\n        uint64 sector_number;\\n        bytes sealed_cid;\\n        int64 seal_rand_epoch;\\n        uint64[] deal_ids;\\n        int64 expiration;\\n        bytes unsealed_cid;\\n    }\\n    struct ReplicaUpdateInner {\\n        uint64 sector_number;\\n        uint64 deadline;\\n        uint64 partition;\\n        bytes new_sealed_cid;\\n        bytes new_unsealed_cid;\\n        uint64[] deals;\\n        RegisteredUpdateProof update_proof_type;\\n        bytes replica_proof;\\n    }\\n\\n    struct ReplicaUpdate {\\n        uint64 sector_number;\\n        uint64 deadline;\\n        uint64 partition;\\n        bytes new_sealed_cid;\\n        uint64 deals;\\n        RegisteredUpdateProof update_proof_type;\\n        bytes replica_proof;\\n    }\\n\\n    struct ReplicaUpdate2 {\\n        uint64 sector_number;\\n        uint64 deadline;\\n        uint64 partition;\\n        bytes new_sealed_cid;\\n        bytes new_unsealed_cid;\\n        uint64 deals;\\n        RegisteredUpdateProof update_proof_type;\\n        bytes replica_proof;\\n    }\\n\\n    struct PoStPartition {\\n        uint64 index;\\n        int8 skipped;\\n    }\\n\\n    struct PoStProof {\\n        RegisteredPoStProof post_proof;\\n        bytes proof_bytes;\\n    }\\n\\n    struct VestingFunds {\\n        int64 epoch;\\n        int256 amount;\\n    }\\n    struct SectorDeals {\\n        int64 sector_type;\\n        int64 sector_expiry;\\n        uint64[] deal_ids;\\n    }\\n\\n    struct Signature {\\n        int8 sig_type;\\n        bytes data;\\n    }\\n\\n    struct DealProposal {\\n        bytes piece_cid;\\n        uint64 piece_size;\\n        bool verified_deal;\\n        bytes client;\\n        bytes provider;\\n        string label;\\n        int64 start_epoch;\\n        int64 end_epoch;\\n        int storage_price_per_epoch;\\n        int provider_collateral;\\n        int client_collateral;\\n    }\\n\\n    struct ClientDealProposal {\\n        DealProposal proposal;\\n        Signature client_signature;\\n    }\\n\\n    struct SectorDealData {\\n        bytes commd;\\n    }\\n\\n    struct CID {\\n        uint8 version;\\n        uint64 codec;\\n        Multihash hash;\\n    }\\n\\n    struct Multihash {\\n        uint64 code;\\n        uint8 size;\\n        bytes digest;\\n    }\\n\\n    struct VerifiedDealInfo {\\n        uint64 client;\\n        uint64 allocation_id;\\n        bytes data;\\n        uint64 size;\\n    }\\n\\n    struct SectorDataSpec {\\n        uint64[] deal_ids;\\n        int64 sector_type;\\n    }\\n}\\n\",\"keccak256\":\"0xebdb76491f260497fdac9c48a8317e54af4d16a305db2a781ef99bccd098df26\",\"license\":\"Apache-2.0\"},\"contracts/filecoinMockAPIs/types/MinerTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.4.25 <=0.8.17;\\n\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin miner actor types for Solidity.\\n/// @author Zondax AG\\nlibrary MinerTypes {\\n    struct GetOwnerReturn {\\n        string owner;\\n    }\\n    struct IsControllingAddressParam {\\n        string addr;\\n    }\\n    struct IsControllingAddressReturn {\\n        bool is_controlling;\\n    }\\n    struct GetSectorSizeReturn {\\n        uint64 sector_size;\\n    }\\n    struct GetAvailableBalanceReturn {\\n        int256 available_balance;\\n    }\\n    struct GetVestingFundsReturn {\\n        CommonTypes.VestingFunds[] vesting_funds;\\n    }\\n\\n    struct ChangeBeneficiaryParams {\\n        string new_beneficiary;\\n        int256 new_quota;\\n        uint64 new_expiration;\\n    }\\n\\n    struct GetBeneficiaryReturn {\\n        CommonTypes.ActiveBeneficiary active;\\n        CommonTypes.PendingBeneficiaryChange proposed;\\n    }\\n}\\n\",\"keccak256\":\"0x1b06628cb1781edf562540b9c0ae31ae19ca2a76eed55564c4ee485becaf60c7\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000600160006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001b5038038062001b50833981810160405281019062000052919062000408565b8060009081620000639190620006a4565b50610800600660008060048111156200008157620000806200078b565b5b60048111156200009657620000956200078b565b5b815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550628000006006600060016004811115620000e957620000e86200078b565b5b6004811115620000fe57620000fd6200078b565b5b815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550632000000060066000600260048111156200015257620001516200078b565b5b60048111156200016757620001666200078b565b5b815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506408000000006006600060036004811115620001bc57620001bb6200078b565b5b6004811115620001d157620001d06200078b565b5b815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550641000000000600660006004808111156200022557620002246200078b565b5b60048111156200023a57620002396200078b565b5b815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050620007ba565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002de8262000293565b810181811067ffffffffffffffff821117156200030057620002ff620002a4565b5b80604052505050565b60006200031562000275565b9050620003238282620002d3565b919050565b600067ffffffffffffffff821115620003465762000345620002a4565b5b620003518262000293565b9050602081019050919050565b60005b838110156200037e57808201518184015260208101905062000361565b60008484015250505050565b6000620003a16200039b8462000328565b62000309565b905082815260208101848484011115620003c057620003bf6200028e565b5b620003cd8482856200035e565b509392505050565b600082601f830112620003ed57620003ec62000289565b5b8151620003ff8482602086016200038a565b91505092915050565b6000602082840312156200042157620004206200027f565b5b600082015167ffffffffffffffff81111562000442576200044162000284565b5b6200045084828501620003d5565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004ac57607f821691505b602082108103620004c257620004c162000464565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200052c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004ed565b620005388683620004ed565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005856200057f620005798462000550565b6200055a565b62000550565b9050919050565b6000819050919050565b620005a18362000564565b620005b9620005b0826200058c565b848454620004fa565b825550505050565b600090565b620005d0620005c1565b620005dd81848462000596565b505050565b5b818110156200060557620005f9600082620005c6565b600181019050620005e3565b5050565b601f82111562000654576200061e81620004c8565b6200062984620004dd565b8101602085101562000639578190505b620006516200064885620004dd565b830182620005e2565b50505b505050565b600082821c905092915050565b6000620006796000198460080262000659565b1980831691505092915050565b600062000694838362000666565b9150826002028217905092915050565b620006af8262000459565b67ffffffffffffffff811115620006cb57620006ca620002a4565b5b620006d7825462000493565b620006e482828562000609565b600060209050601f8311600181146200071c576000841562000707578287015190505b62000713858262000686565b86555062000783565b601f1984166200072c86620004c8565b60005b8281101562000756578489015182556001820191506020850194506020810190506200072f565b8683101562000776578489015162000772601f89168262000666565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61138680620007ca6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806381ab68dd1161006657806381ab68dd1461010e578063a9b494a11461012a578063d9fc907e14610148578063e8d3863314610166578063f5cd020c1461019657610093565b80630ac298dc14610098578063207f2cec146100b6578063214c471c146100d257806359cf9e17146100f0575b600080fd5b6100a06101b2565b6040516100ad9190610898565b60405180910390f35b6100d060048036038101906100cb9190610a03565b610272565b005b6100da610285565b6040516100e79190610b89565b60405180910390f35b6100f861033f565b6040516101059190610bc7565b60405180910390f35b61012860048036038101906101239190610cd8565b610365565b005b6101326104ac565b60405161013f9190610d4c565b60405180910390f35b61015061051e565b60405161015d9190610f10565b60405180910390f35b610180600480360381019061017b9190610f8a565b61065a565b60405161018d9190610fef565b60405180910390f35b6101b060048036038101906101ab9190610a03565b61067b565b005b6101ba6106a8565b60008080546101c890611039565b9050036101d457600080fd5b6040518060200160405280600080546101ec90611039565b80601f016020809104026020016040519081016040528092919081815260200182805461021890611039565b80156102655780601f1061023a57610100808354040283529160200191610265565b820191906000526020600020905b81548152906001019060200180831161024857829003601f168201915b5050505050815250905090565b80600090816102819190611220565b5050565b61028d6106bb565b6000600167ffffffffffffffff8111156102aa576102a96108d8565b5b6040519080825280602002602001820160405280156102e357816020015b6102d06106ce565b8152602001906001900390816102c85790505b5090506040518060400160405280636373840960070b8152602001686c6b935b8bbd4000008152508160008151811061031f5761031e6112f2565b5b602002602001018190525060405180602001604052808281525091505090565b6103476106eb565b604051806020016040528069021e19e0c9bab2400000815250905090565b600160009054906101000a900460ff1661044d57600060405180606001604052808360200151815260200160008152602001836040015167ffffffffffffffff16815250905060405180604001604052808360000151815260200182815250600260008201518160000190816103db9190611220565b50602082015181600101600082015181600001556020820151816001015560408201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505090505060018060006101000a81548160ff021916908315150217905550506104a9565b8060000151600260000190816104639190611220565b5080602001516002600101600001819055508060400151600260010160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b50565b6104b46106fe565b604051806020016040528060066000600160048111156104d7576104d6611321565b5b60048111156104e9576104e8611321565b5b815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815250905090565b61052661071b565b600160009054906101000a900460ff1661053f57600080fd5b610547610741565b6040518060400160405280600260405180604001604052908160008201805461056f90611039565b80601f016020809104026020016040519081016040528092919081815260200182805461059b90611039565b80156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b505050505081526020016001820160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152505081526020018281525091505090565b61066261077e565b6040518060200160405280600015158152509050919050565b600080805461068990611039565b90501461069557600080fd5b80600090816106a49190611220565b5050565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b6040518060400160405280600060070b8152602001600081525090565b6040518060200160405280600081525090565b6040518060200160405280600067ffffffffffffffff1681525090565b604051806040016040528061072e610793565b815260200161073b610741565b81525090565b6040518060a001604052806060815260200160008152602001600067ffffffffffffffff1681526020016000151581526020016000151581525090565b60405180602001604052806000151581525090565b6040518060400160405280606081526020016107ad6107b3565b81525090565b60405180606001604052806000815260200160008152602001600067ffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156108185780820151818401526020810190506107fd565b60008484015250505050565b6000601f19601f8301169050919050565b6000610840826107de565b61084a81856107e9565b935061085a8185602086016107fa565b61086381610824565b840191505092915050565b6000602083016000830151848203600086015261088b8282610835565b9150508091505092915050565b600060208201905081810360008301526108b2818461086e565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61091082610824565b810181811067ffffffffffffffff8211171561092f5761092e6108d8565b5b80604052505050565b60006109426108ba565b905061094e8282610907565b919050565b600067ffffffffffffffff82111561096e5761096d6108d8565b5b61097782610824565b9050602081019050919050565b82818337600083830152505050565b60006109a66109a184610953565b610938565b9050828152602081018484840111156109c2576109c16108d3565b5b6109cd848285610984565b509392505050565b600082601f8301126109ea576109e96108ce565b5b81356109fa848260208601610993565b91505092915050565b600060208284031215610a1957610a186108c4565b5b600082013567ffffffffffffffff811115610a3757610a366108c9565b5b610a43848285016109d5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008160070b9050919050565b610a8e81610a78565b82525050565b6000819050919050565b610aa781610a94565b82525050565b604082016000820151610ac36000850182610a85565b506020820151610ad66020850182610a9e565b50505050565b6000610ae88383610aad565b60408301905092915050565b6000602082019050919050565b6000610b0c82610a4c565b610b168185610a57565b9350610b2183610a68565b8060005b83811015610b52578151610b398882610adc565b9750610b4483610af4565b925050600181019050610b25565b5085935050505092915050565b60006020830160008301518482036000860152610b7c8282610b01565b9150508091505092915050565b60006020820190508181036000830152610ba38184610b5f565b905092915050565b602082016000820151610bc16000850182610a9e565b50505050565b6000602082019050610bdc6000830184610bab565b92915050565b600080fd5b600080fd5b610bf581610a94565b8114610c0057600080fd5b50565b600081359050610c1281610bec565b92915050565b600067ffffffffffffffff82169050919050565b610c3581610c18565b8114610c4057600080fd5b50565b600081359050610c5281610c2c565b92915050565b600060608284031215610c6e57610c6d610be2565b5b610c786060610938565b9050600082013567ffffffffffffffff811115610c9857610c97610be7565b5b610ca4848285016109d5565b6000830152506020610cb884828501610c03565b6020830152506040610ccc84828501610c43565b60408301525092915050565b600060208284031215610cee57610ced6108c4565b5b600082013567ffffffffffffffff811115610d0c57610d0b6108c9565b5b610d1884828501610c58565b91505092915050565b610d2a81610c18565b82525050565b602082016000820151610d466000850182610d21565b50505050565b6000602082019050610d616000830184610d30565b92915050565b606082016000820151610d7d6000850182610a9e565b506020820151610d906020850182610a9e565b506040820151610da36040850182610d21565b50505050565b60006080830160008301518482036000860152610dc68282610835565b9150506020830151610ddb6020860182610d67565b508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000610e0d82610de6565b610e178185610df1565b9350610e278185602086016107fa565b610e3081610824565b840191505092915050565b60008115159050919050565b610e5081610e3b565b82525050565b600060a0830160008301518482036000860152610e738282610e02565b9150506020830151610e886020860182610a9e565b506040830151610e9b6040860182610d21565b506060830151610eae6060860182610e47565b506080830151610ec16080860182610e47565b508091505092915050565b60006040830160008301518482036000860152610ee98282610da9565b91505060208301518482036020860152610f038282610e56565b9150508091505092915050565b60006020820190508181036000830152610f2a8184610ecc565b905092915050565b600060208284031215610f4857610f47610be2565b5b610f526020610938565b9050600082013567ffffffffffffffff811115610f7257610f71610be7565b5b610f7e848285016109d5565b60008301525092915050565b600060208284031215610fa057610f9f6108c4565b5b600082013567ffffffffffffffff811115610fbe57610fbd6108c9565b5b610fca84828501610f32565b91505092915050565b602082016000820151610fe96000850182610e47565b50505050565b60006020820190506110046000830184610fd3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061105157607f821691505b6020821081036110645761106361100a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026110cc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261108f565b6110d6868361108f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061111d611118611113846110ee565b6110f8565b6110ee565b9050919050565b6000819050919050565b61113783611102565b61114b61114382611124565b84845461109c565b825550505050565b600090565b611160611153565b61116b81848461112e565b505050565b5b8181101561118f57611184600082611158565b600181019050611171565b5050565b601f8211156111d4576111a58161106a565b6111ae8461107f565b810160208510156111bd578190505b6111d16111c98561107f565b830182611170565b50505b505050565b600082821c905092915050565b60006111f7600019846008026111d9565b1980831691505092915050565b600061121083836111e6565b9150826002028217905092915050565b611229826107de565b67ffffffffffffffff811115611242576112416108d8565b5b61124c8254611039565b611257828285611193565b600060209050601f83116001811461128a5760008415611278578287015190505b6112828582611204565b8655506112ea565b601f1984166112988661106a565b60005b828110156112c05784890151825560018201915060208501945060208101905061129b565b868310156112dd57848901516112d9601f8916826111e6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea264697066735822122049770cf8f11c945c6af54c4b36d6062671b8775ad61c4adebef5382bef9a608964736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Zondax AG",
    "details": "Methods prefixed with mock_ will not be available in the real library. These methods are merely used to set mock state. Note that this interface will likely break in the future as we align it",
    "kind": "dev",
    "methods": {
      "change_owner_address(string)": {
        "params": {
          "addr": "New owner address"
        }
      },
      "get_available_balance()": {
        "returns": {
          "_0": "the available balance of this miner."
        }
      },
      "get_owner()": {
        "returns": {
          "_0": "the owner address of a Miner"
        }
      },
      "get_sector_size()": {
        "returns": {
          "_0": "the miner's sector size."
        }
      },
      "get_vesting_funds()": {
        "returns": {
          "_0": "the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples."
        }
      },
      "is_controlling_address((string))": {
        "params": {
          "params": "The \"controlling\" addresses are the Owner, the Worker, and all Control Addresses."
        },
        "returns": {
          "_0": "Whether the provided address is \"controlling\"."
        }
      }
    },
    "title": "This contract is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed. However, in this mock library, no actual call is performed.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "change_beneficiary((string,int256,uint64))": {
        "notice": "Proposes or confirms a change of beneficiary address.A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md"
      },
      "change_owner_address(string)": {
        "notice": "Proposes or confirms a change of owner address.If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address."
      },
      "constructor": {
        "notice": "(Mock method) Sets the owner of a Miner on contract deployment, which will be returned via get_owner()."
      },
      "get_available_balance()": {
        "notice": "This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)Can go negative if the miner is in IP debt."
      },
      "get_beneficiary()": {
        "notice": "This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.Retrieves the currently active and proposed beneficiary information."
      },
      "get_owner()": {
        "notice": "Income and returned collateral are paid to this addressThis address is also allowed to change the worker address for the miner"
      },
      "mock_set_owner(string)": {
        "notice": "(Mock method) Sets the owner of a Miner, which will be returned via get_owner()."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 638,
        "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 641,
        "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
        "label": "isBeneficiarySet",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 644,
        "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
        "label": "activeBeneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ActiveBeneficiary)1023_storage"
      },
      {
        "astId": 649,
        "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
        "label": "sectorSizesBytes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(SectorSize)983,t_uint64)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(SectorSize)983": {
        "encoding": "inplace",
        "label": "enum CommonTypes.SectorSize",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_enum(SectorSize)983,t_uint64)": {
        "encoding": "mapping",
        "key": "t_enum(SectorSize)983",
        "label": "mapping(enum CommonTypes.SectorSize => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ActiveBeneficiary)1023_storage": {
        "encoding": "inplace",
        "label": "struct CommonTypes.ActiveBeneficiary",
        "members": [
          {
            "astId": 1019,
            "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1022,
            "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
            "label": "term",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(BeneficiaryTerm)1017_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BeneficiaryTerm)1017_storage": {
        "encoding": "inplace",
        "label": "struct CommonTypes.BeneficiaryTerm",
        "members": [
          {
            "astId": 1012,
            "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
            "label": "quota",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 1014,
            "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
            "label": "used_quota",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 1016,
            "contract": "contracts/filecoinMockAPIs/MinerAPI.sol:MinerAPI",
            "label": "expiration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}